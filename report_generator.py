"""
Report generator module for Duplicate Patient Manager

This module generates HTML reports for duplicate patient processing results.
"""

import logging
from datetime import datetime
from typing import Dict, Any, List


class ReportGenerator:
    """Generate HTML reports for duplicate patient processing"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def generate_html_report(self, results: Dict[str, Any]) -> str:
        """Generate HTML report from processing results"""
        try:
            html_content = self._build_html_report(results)
            self.logger.info("HTML report generated successfully")
            return html_content
        except Exception as e:
            self.logger.error(f"Error generating HTML report: {e}")
            return self._generate_error_report(str(e))
    
    def _build_html_report(self, results: Dict[str, Any]) -> str:
        """Build the complete HTML report"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Duplicate Patient Management Report</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>🏥 Duplicate Patient Management Report</h1>
            <p class="timestamp">Generated on: {timestamp}</p>
        </header>
        
        {self._build_summary_section(results)}
        {self._build_processing_details_section(results)}
        {self._build_errors_section(results)}
        
        
        <footer class="footer">
            <p>Automated report generated by Duplicate Patient Manager v1.0</p>
            <p>For questions or issues, contact: <a href="mailto:tanay@doctoralliance.com">tanay@doctoralliance.com</a></p>
        </footer>
    </div>
</body>
</html>
"""
        return html
    
    def _get_css_styles(self) -> str:
        """Return CSS styles for the report"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .timestamp {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .section {
            margin-bottom: 30px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .section-header {
            background: #f8f9fa;
            padding: 15px 20px;
            border-bottom: 2px solid #e9ecef;
            font-size: 1.3em;
            font-weight: bold;
            color: #495057;
        }
        
        .section-content {
            padding: 20px;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }
        
        .summary-card.success {
            background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
        }
        
        .summary-card.warning {
            background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
        }
        
        .summary-card.error {
            background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
        }
        
        .summary-card h3 {
            font-size: 2.5em;
            margin-bottom: 5px;
        }
        
        .summary-card p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 15px;
            background: #f8f9fa;
            border-left: 4px solid #74b9ff;
            border-radius: 4px;
        }
        
        .info-item strong {
            color: #495057;
        }
        
        .details-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }
        
        .details-table th,
        .details-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        
        .details-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #495057;
        }
        
        .details-table tr:hover {
            background-color: #f8f9fa;
        }
        
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
        }
        
        .badge.success {
            background-color: #d4edda;
            color: #155724;
        }
        
        .badge.warning {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .badge.error {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .error-list {
            max-height: 400px;
            overflow-y: auto;
            background: #f8f9fa;
            border-radius: 4px;
            padding: 15px;
        }
        
        .error-item {
            padding: 10px;
            margin-bottom: 10px;
            background: white;
            border-left: 4px solid #dc3545;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .no-errors {
            text-align: center;
            color: #28a745;
            font-size: 1.2em;
            padding: 20px;
        }
        
        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            color: #6c757d;
        }
        
        .footer a {
            color: #74b9ff;
            text-decoration: none;
        }
        
        .footer a:hover {
            text-decoration: underline;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .summary-grid {
                grid-template-columns: 1fr;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
        """
    
    def _build_summary_section(self, results: Dict[str, Any]) -> str:
        """Build the summary section of the report"""
        return f"""
        <div class="section">
            <div class="section-header">
                📊 Processing Summary
            </div>
            <div class="section-content">
                <div class="summary-grid">
                    <div class="summary-card">
                        <h3>{results.get('total_patients', 0)}</h3>
                        <p>Total Patients</p>
                    </div>
                    <div class="summary-card success">
                        <h3>{results.get('duplicate_groups_found', 0)}</h3>
                        <p>Duplicate Groups Found</p>
                    </div>
                    <div class="summary-card warning">
                        <h3>{results.get('patients_deleted', 0)}</h3>
                        <p>Patients Deleted</p>
                    </div>
                    <div class="summary-card {'error' if results.get('errors') else 'success'}">
                        <h3>{len(results.get('errors', []))}</h3>
                        <p>Errors Encountered</p>
                    </div>
                </div>
                
                <div class="info-grid">
                    <div class="info-item">
                        <span><strong>PG Company ID:</strong></span>
                        <span>{results.get('pg_company_id', 'N/A')}</span>
                    </div>
                    <div class="info-item">
                        <span><strong>Patients Processed:</strong></span>
                        <span>{results.get('patients_processed', 0)}</span>
                    </div>
                    <div class="info-item">
                        <span><strong>Orders Moved:</strong></span>
                        <span>{results.get('orders_moved', 0)}</span>
                    </div>
                    <div class="info-item">
                        <span><strong>CC Notes Moved:</strong></span>
                        <span>{results.get('cc_notes_moved', 0)}</span>
                    </div>
                </div>
            </div>
        </div>
        """
    
    def _build_processing_details_section(self, results: Dict[str, Any]) -> str:
        """Build the processing details section"""
        details = results.get('processing_details', [])
        
        if not details:
            return """
            <div class="section">
                <div class="section-header">
                    📋 Processing Details
                </div>
                <div class="section-content">
                    <p>No duplicate groups were processed.</p>
                </div>
            </div>
            """
        
        rows = ""
        for detail in details:
            status = "success" if not detail.get('errors') else "warning"
            deleted_patients = ', '.join(detail.get('deleted_patient_ids', []))
            
            rows += f"""
            <tr>
                <td>{detail.get('group_number', 'N/A')}</td>
                <td>{detail.get('primary_patient_name', 'N/A')}</td>
                <td>{detail.get('primary_patient_id', 'N/A')}</td>
                <td>{deleted_patients or 'None'}</td>
                <td>{detail.get('moved_orders', 0)}</td>
                <td>{detail.get('moved_cc_notes', 0)}</td>
                <td><span class="badge {status}">{'Success' if not detail.get('errors') else 'Warning'}</span></td>
            </tr>
            """
        
        return f"""
        <div class="section">
            <div class="section-header">
                📋 Processing Details
            </div>
            <div class="section-content">
                <table class="details-table">
                    <thead>
                        <tr>
                            <th>Group #</th>
                            <th>Primary Patient Name</th>
                            <th>Primary Patient ID</th>
                            <th>Deleted Patient IDs</th>
                            <th>Orders Moved</th>
                            <th>CC Notes Moved</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {rows}
                    </tbody>
                </table>
            </div>
        </div>
        """
    
    def _build_errors_section(self, results: Dict[str, Any]) -> str:
        """Build the errors section"""
        errors = results.get('errors', [])
        
        if not errors:
            return """
            <div class="section">
                <div class="section-header">
                    ⚠️ Errors and Warnings
                </div>
                <div class="section-content">
                    <div class="no-errors">
                        ✅ No errors encountered during processing!
                    </div>
                </div>
            </div>
            """
        
        error_items = ""
        for i, error in enumerate(errors, 1):
            error_items += f"""
            <div class="error-item">
                <strong>Error #{i}:</strong> {error}
            </div>
            """
        
        return f"""
        <div class="section">
            <div class="section-header">
                ⚠️ Errors and Warnings ({len(errors)} total)
            </div>
            <div class="section-content">
                <div class="error-list">
                    {error_items}
                </div>
            </div>
        </div>
        """
    
    def _generate_error_report(self, error_message: str) -> str:
        """Generate an error report when report generation fails"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        return f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report Generation Error</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }}
        .error-container {{ background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .error-header {{ color: #dc3545; font-size: 1.5em; margin-bottom: 20px; }}
        .error-message {{ background: #f8d7da; color: #721c24; padding: 15px; border-radius: 4px; }}
        .timestamp {{ color: #6c757d; margin-top: 20px; font-size: 0.9em; }}
    </style>
</head>
<body>
    <div class="error-container">
        <h1 class="error-header">🚫 Report Generation Error</h1>
        <div class="error-message">
            <strong>Error:</strong> {error_message}
        </div>
        <div class="timestamp">Generated on: {timestamp}</div>
    </div>
</body>
</html>
        """
    
    def generate_text_report(self, results: Dict[str, Any]) -> str:
        """Generate a plain text version of the report"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            report = f"""
DUPLICATE PATIENT MANAGEMENT REPORT
Generated on: {timestamp}

SUMMARY
=======
PG Company ID: {results.get('pg_company_id', 'N/A')}
Total Patients: {results.get('total_patients', 0)}
Duplicate Groups Found: {results.get('duplicate_groups_found', 0)}
Patients Processed: {results.get('patients_processed', 0)}
Patients Deleted: {results.get('patients_deleted', 0)}
Orders Moved: {results.get('orders_moved', 0)}
CC Notes Moved: {results.get('cc_notes_moved', 0)}
Errors Encountered: {len(results.get('errors', []))}

PROCESSING DETAILS
==================
"""
            
            details = results.get('processing_details', [])
            if details:
                for detail in details:
                    report += f"""
Group #{detail.get('group_number', 'N/A')}:
  Primary Patient: {detail.get('primary_patient_name', 'N/A')} ({detail.get('primary_patient_id', 'N/A')})
  Deleted Patients: {', '.join(detail.get('deleted_patient_ids', [])) or 'None'}
  Orders Moved: {detail.get('moved_orders', 0)}
  CC Notes Moved: {detail.get('moved_cc_notes', 0)}
  Status: {'Success' if not detail.get('errors') else 'Warning'}
"""
            else:
                report += "No duplicate groups were processed.\n"
            
            errors = results.get('errors', [])
            if errors:
                report += f"\nERRORS AND WARNINGS ({len(errors)} total)\n"
                report += "=" * 50 + "\n"
                for i, error in enumerate(errors, 1):
                    report += f"{i}. {error}\n"
            else:
                report += "\nNo errors encountered during processing.\n"
            
            return report
            
        except Exception as e:
            self.logger.error(f"Error generating text report: {e}")
            return f"Error generating text report: {e}"
